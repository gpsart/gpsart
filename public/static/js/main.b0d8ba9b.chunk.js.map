{"version":3,"sources":["http-common.js","services/activity-routes.data.service.js","components/ActivityRoutesGrid.js","components/ActivityRoute.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","id","useStyles","makeStyles","theme","cardGrid","paddingTop","spacing","paddingBottom","card","height","display","flexDirection","cardMedia","cardContent","flexGrow","link","textDecoration","ActivityRoutesGrid","classes","useState","activityRoutes","setActivityRoutes","useEffect","a","ActivityRoutesDataService","getAll","data","fetchData","Container","className","maxWidth","Grid","container","map","activityRoute","item","key","xs","sm","md","to","Card","CardMedia","image","title","name","CardContent","Typography","gutterBottom","variant","component","distance","CardActions","ActivityRoute","useParams","setActivityRoute","rate","icon","marginRight","heroContent","backgroundColor","palette","background","paper","padding","heroButtons","marginTop","footer","App","Fragment","CssBaseline","align","color","paragraph","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b0d8ba9b.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"http://gpsart.hurma.tv/api/v1\",\n  headers: {\n    \"Content-type\": \"application/json\"\n  }\n});\n","import http from \"../http-common\";\n\nclass ActivityRoutesDataService {\n  getAll() {\n    return http.get(\"/routes\");\n  }\n\n  get(id) {\n    return http.get(`/routes/${id}`);\n  }\n}\n\nexport default new ActivityRoutesDataService();\n","import React, {useState, useEffect} from \"react\";\nimport ActivityRoutesDataService from \"../services/activity-routes.data.service\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Container from \"@material-ui/core/Container\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Link} from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  link: {\n    textDecoration: 'none',\n  },\n}));\n\n\nconst ActivityRoutesGrid = () => {\n  const classes = useStyles();\n  const [activityRoutes, setActivityRoutes] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const activityRoutes = await ActivityRoutesDataService.getAll();\n\n      setActivityRoutes(activityRoutes.data);\n    }\n\n    fetchData();\n  }, []);\n\n  return (\n    <Container className={classes.cardGrid} maxWidth=\"md\">\n      {/* End hero unit */}\n      <Grid container spacing={4}>\n        {activityRoutes.map((activityRoute) => (\n          <Grid item key={activityRoute.id} xs={12} sm={6} md={4}>\n            <Link className={classes.link} to={`/activity-routes/${activityRoute.id}`} >\n              <Card className={classes.card}>\n                <CardMedia\n                  className={classes.cardMedia}\n                  image={activityRoute.image}\n                  title={activityRoute.name}\n                />\n                <CardContent className={classes.cardContent}>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    {activityRoute.name}\n                  </Typography>\n                  <Typography>\n                    Distance:  {activityRoute.distance}\n                  </Typography>\n                </CardContent>\n                <CardActions>\n                  {/*<Button size=\"small\" color=\"primary\">*/}\n                  {/*  View*/}\n                  {/*</Button>*/}\n                  {/*<Button size=\"small\" color=\"primary\">*/}\n                  {/*  Edit*/}\n                  {/*</Button>*/}\n                </CardActions>\n              </Card>\n            </Link>\n          </Grid>\n        ))}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default ActivityRoutesGrid;\n","import React, {useEffect, useState} from 'react';\nimport ActivityRoutesDataService from \"../services/activity-routes.data.service\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {useParams} from \"react-router-dom\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Card from \"@material-ui/core/Card\";\nimport Container from \"@material-ui/core/Container\";\n\nconst useStyles = makeStyles((theme) => ({\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  link: {\n    textDecoration: 'none',\n  },\n}));\n\nconst ActivityRoute = () => {\n  let {id} = useParams();\n  const classes = useStyles();\n  const [activityRoute, setActivityRoute] = useState({});\n\n  useEffect(() => {\n    async function fetchData() {\n      const activityRoute = await ActivityRoutesDataService.get(id);\n\n      setActivityRoute(activityRoute.data);\n    }\n\n    fetchData();\n  }, [id]);\n\n  return (\n    <Container className={classes.cardGrid} maxWidth=\"md\">\n      <Card className={classes.card}>\n        <CardMedia\n          className={classes.cardMedia}\n          image={activityRoute.image}\n          title={activityRoute.name}\n        />\n        <CardContent className={classes.cardContent}>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {activityRoute.name}\n          </Typography>\n          <Typography>\n            Distance:  {activityRoute.distance}\n          </Typography>\n          <Typography>\n            Rate:  {activityRoute.rate}\n          </Typography>\n        </CardContent>\n        <CardActions>\n          {/*<Button size=\"small\" color=\"primary\">*/}\n          {/*  View*/}\n          {/*</Button>*/}\n          {/*<Button size=\"small\" color=\"primary\">*/}\n          {/*  Edit*/}\n          {/*</Button>*/}\n        </CardActions>\n      </Card>\n    </Container>\n  );\n};\n\nexport default ActivityRoute;\n","import React from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport ActivityRoutesGrid from './components/ActivityRoutesGrid'\nimport ActivityRoute from './components/ActivityRoute'\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <React.Fragment>\n        <CssBaseline/>\n        {/*<AppBar position=\"relative\">*/}\n        {/*  <Toolbar>*/}\n        {/*    <CameraIcon className={classes.icon}/>*/}\n        {/*    <Typography variant=\"h6\" color=\"inherit\" noWrap>*/}\n        {/*      Album layout*/}\n        {/*    </Typography>*/}\n        {/*  </Toolbar>*/}\n        {/*</AppBar>*/}\n        <main>\n          {/* Hero unit */}\n          <div className={classes.heroContent}>\n            <Container maxWidth=\"sm\">\n              <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n                Share your art\n              </Typography>\n              <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\n                by SteelCannons\n              </Typography>\n              {/*<div className={classes.heroButtons}>*/}\n              {/*  <Grid container spacing={2} justify=\"center\">*/}\n              {/*    <Grid item>*/}\n              {/*      <Button variant=\"contained\" color=\"primary\">*/}\n              {/*        Main call to action*/}\n              {/*      </Button>*/}\n              {/*    </Grid>*/}\n              {/*    <Grid item>*/}\n              {/*      <Button variant=\"outlined\" color=\"primary\">*/}\n              {/*        Secondary action*/}\n              {/*      </Button>*/}\n              {/*    </Grid>*/}\n              {/*  </Grid>*/}\n              {/*</div>*/}\n            </Container>\n          </div>\n          <Switch>\n            <Route path=\"/\" component={ActivityRoutesGrid} exact/>\n            <Route path=\"/activity-routes/:id\" component={ActivityRoute}/>\n          </Switch>\n        </main>\n        {/* Footer */}\n        <footer className={classes.footer}>\n          {/*<Typography variant=\"h6\" align=\"center\" gutterBottom>*/}\n          {/*  Footer*/}\n          {/*</Typography>*/}\n          <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\n            by SteelCannons c 2020\n          </Typography>\n        </footer>\n        {/* End footer */}\n      </React.Fragment>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}